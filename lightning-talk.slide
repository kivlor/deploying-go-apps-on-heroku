The Caveats of Deploying Go Apps on Heroku

* An Introduction

- I'm Andrew ðŸ˜Ž
- I work for a large SaaS company (the shipping and fulfilment one)
- I like to think I'm a polyglot (but PHP is my daily language)
- I'm not a Gopher (well, not yet)

* What the Heck is Heroku?

- Heroku is a Platform as a Service (PaaS)
- It supports a bunch of languages (Ruby, Node, Go etc.)
- It's free (for experiments and short life apps)
- Not just for web apps

* Our Example App

The classic hello world:

    package main

    import (
        "fmt"
        "net/http"
    )

    func root(w http.ResponseWriter, r *http.Request) {
        fmt.Fprint(w, "G'day")
    }

    func main() {
        http.HandleFunc("/", root)
        http.ListenAndServe(":8080", nil)
    }

* Go App Detection

- Heroku (usually) relies on package managers to detect app types
- Ruby has Bundler, Node has NPM, Go has... Godep?
- To setup Godep on a fresh project we run:
    $ godep save ./...

* The Procfile

- Heroku uses a Procfile to define commands and the process to run them
- Your Procfile can define multiple process:command pairs (one per line)
- To create a web process that runs our app we use:
    web: hello

* The `cmd` Directory

- Heroku uses the convention of a `cmd` directory for Go apps
- Each command should reside in a sub directory matching your Procfile
- Based on our Procfile, our example apps cmd directory will be:
    .
    â”œâ”€â”€ cmd
    â”‚Â Â  â””â”€â”€ hello
    â”‚Â Â      â””â”€â”€ main.go

* Which Port?

- Each Heroku web process is assigned a random port on launch
- The port is stored in the environment variable $PORT
- In Go, we can access environment variables using Getenv from the `os` package
    
    package main
    
    import (
        "fmt"
        "net/http"
        "os"
    )

    func root(w http.ResponseWriter, r *http.Request) {
        fmt.Fprint(w, "G'day")
    }

    func main() {
        http.HandleFunc("/", root)
        http.ListenAndServe(":"+os.Getenv("PORT"), nil)
    }

* Ready, Set, Deploy!

- Heroku has it's own toolbelt for provisioning/deploying/logging
- The actual deploy step is done via `git push`
- Now that our app is ready, we can provision and deploy:

    $ heroku create // creates our new app
    $ git push heroku master // deploys our app
    $ herkou open // launches our browser with the new app

* Questions?

ðŸ–¼ This talk (and app): [[https://git.io/val41]]
ðŸ™‹ More about me: [[http://kivlor.com]]
